/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check Health */
        get: operations["check_health_health__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Notes */
        get: operations["get_notes_notes__get"];
        put?: never;
        /** Create New Note */
        post: operations["create_new_note_notes__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Note By Id */
        get: operations["get_note_by_id_notes__id__get"];
        /** Update Note */
        put: operations["update_note_notes__id__put"];
        post?: never;
        /** Delete Note */
        delete: operations["delete_note_notes__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Info
         * @description Get current authenticated user information.
         *
         *     This endpoint demonstrates the Cognito JWT authentication integration.
         *     It validates the JWT token and returns the user information from the database.
         *
         *     - **Authorization**: Bearer token required (Cognito JWT)
         *     - **Returns**: User information including Cognito ID, email, and profile data
         *
         *     ## Usage
         *     1. Obtain a JWT token using the `scripts/get-cognito-token.py` script
         *     2. Include the token in the Authorization header: `Bearer <your-token>`
         *     3. Send a GET request to this endpoint
         *
         *     The endpoint will:
         *     - Validate the JWT token against Cognito's JWKS
         *     - Look up the user in the database by cognito_user_id
         *     - Create a new user record if this is the first time accessing the API
         *     - Return the complete user information
         */
        get: operations["get_user_info_user_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Profile
         * @description Get current user's profile information.
         *
         *     This is an alias for the `/me` endpoint for profile-specific operations.
         *
         *     - **Authorization**: Bearer token required (Cognito JWT)
         *     - **Returns**: Complete user profile information
         */
        get: operations["get_user_profile_user_profile_get"];
        /**
         * Update User Profile
         * @description Update current user's profile information.
         *
         *     Allows updating email, username, and full_name. Only provided fields will be updated.
         *     Automatically sets is_profile_complete to True when email is provided.
         *
         *     - **Authorization**: Bearer token required (Cognito JWT)
         *     - **Body**: JSON with optional email, username, and/or full_name fields
         *     - **Returns**: Updated user profile information
         *
         *     ## Validation Rules
         *     - Email must be unique across all users
         *     - Username must be unique across all users (if provided)
         *     - At least one field must be provided for update
         */
        put: operations["update_user_profile_user_profile_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register User With Profile
         * @description Complete user registration with profile information.
         *
         *     This endpoint allows setting complete profile information in one call.
         *     Intended for use immediately after first authentication when user needs
         *     to complete their profile.
         *
         *     - **Authorization**: Bearer token required (Cognito JWT)
         *     - **Body**: JSON with required email and optional username, full_name
         *     - **Returns**: Updated user profile information
         *
         *     ## Usage Pattern
         *     1. User authenticates with Cognito (auto-creates minimal user record)
         *     2. Frontend calls this endpoint to complete registration with profile data
         *     3. User profile is marked as complete
         *
         *     ## Validation Rules
         *     - Email is required and must be unique
         *     - Username must be unique if provided
         *     - Will update existing auto-created user record
         */
        post: operations["register_user_with_profile_user_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description Root endpoint
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * DocumentType
         * @enum {string}
         */
        DocumentType: "note" | "pdf";
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** Note */
        Note: {
            /** File Path */
            file_path: string;
            /** Title */
            title: string;
            /** Content */
            content: string;
            /** @default note */
            document_type: components["schemas"]["DocumentType"];
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at?: string;
            /**
             * Metadata
             * @default {}
             */
            metadata: {
                [key: string]: unknown;
            };
            /** Id */
            id: number;
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
        };
        /** NoteCreate */
        NoteCreate: {
            /** File Path */
            file_path: string;
            /** Title */
            title: string;
            /** Content */
            content: string;
            /** @default note */
            document_type: components["schemas"]["DocumentType"];
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at?: string;
            /**
             * Metadata
             * @default {}
             */
            metadata: {
                [key: string]: unknown;
            };
        };
        /** NoteUpdate */
        NoteUpdate: {
            /** Title */
            title?: string | null;
            /** Content */
            content?: string | null;
            /** Metadata */
            metadata?: {
                [key: string]: unknown;
            } | null;
        };
        /** NotesPage */
        NotesPage: {
            /** Items */
            items: components["schemas"]["Note"][] | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
            /** Total */
            total: number;
            /** Pages */
            pages: number;
        };
        /**
         * ProfileUpdateRequest
         * @description Request model for updating user profile information.
         *
         *     Used when users want to update their profile information through PUT/PATCH
         *     endpoints. All fields are optional to allow partial updates.
         *
         *     Attributes:
         *         email: New email address for the user
         *         username: New username for the user
         *         full_name: New full name for the user
         */
        ProfileUpdateRequest: {
            /**
             * Email
             * @description New email address for the user
             */
            email?: string | null;
            /**
             * Username
             * @description New username for the user
             */
            username?: string | null;
            /**
             * Full Name
             * @description New full name for the user
             */
            full_name?: string | null;
        };
        /**
         * UserRegistrationRequest
         * @description Request model for user registration with profile data.
         *
         *     Used during user registration to capture initial profile information.
         *     Email is required, while username and full_name are optional and can
         *     be provided later during profile completion.
         *
         *     Attributes:
         *         email: User's email address (required)
         *         username: Optional username chosen by the user
         *         full_name: Optional full name of the user
         */
        UserRegistrationRequest: {
            /**
             * Email
             * @description User's email address (required)
             */
            email: string;
            /**
             * Username
             * @description Optional username chosen by the user
             */
            username?: string | null;
            /**
             * Full Name
             * @description Optional full name of the user
             */
            full_name?: string | null;
        };
        /**
         * UserResponse
         * @description Response model for user information in API responses.
         *
         *     Used when returning user data to clients. Contains all user information
         *     including profile status and timestamps. This is typically used for
         *     GET endpoints that return user information.
         *
         *     Attributes:
         *         id: Unique identifier for the user
         *         cognito_user_id: AWS Cognito user identifier
         *         email: User's email address
         *         username: Optional username chosen by the user
         *         full_name: Optional full name of the user
         *         is_active: Whether the user account is active
         *         is_verified: Whether the user's email has been verified
         *         is_profile_complete: Whether the user has completed their profile setup
         *         created_at: Timestamp when the user was created
         *         updated_at: Timestamp when the user was last updated
         *         last_login_at: Timestamp of the user's last login, if any
         */
        UserResponse: {
            /**
             * Id
             * Format: uuid
             * @description Unique identifier for the user
             */
            id: string;
            /**
             * Cognito User Id
             * @description AWS Cognito user identifier
             */
            cognito_user_id: string;
            /**
             * Email
             * @description User's email address
             */
            email: string;
            /**
             * Username
             * @description Optional username chosen by the user
             */
            username?: string | null;
            /**
             * Full Name
             * @description Optional full name of the user
             */
            full_name?: string | null;
            /**
             * Is Active
             * @description Whether the user account is active
             */
            is_active: boolean;
            /**
             * Is Verified
             * @description Whether the user's email has been verified
             */
            is_verified: boolean;
            /**
             * Is Profile Complete
             * @description Whether the user has completed their profile setup
             */
            is_profile_complete: boolean;
            /**
             * Created At
             * Format: date-time
             * @description Timestamp when the user was created
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Timestamp when the user was last updated
             */
            updated_at: string;
            /**
             * Last Login At
             * @description Timestamp of the user's last login, if any
             */
            last_login_at?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    check_health_health__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_notes_notes__get: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Items per page */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotesPage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_new_note_notes__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NoteCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Note"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_note_by_id_notes__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Note"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_note_notes__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NoteUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Note"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_note_notes__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_info_user_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    get_user_profile_user_profile_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    update_user_profile_user_profile_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProfileUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    register_user_with_profile_user_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRegistrationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
